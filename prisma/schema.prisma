generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Design {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  pages            Page[]            // Required: Every design has pages
  customComponents CustomComponent[] // Optional: Custom components for this design
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Page {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  designId           String            @db.ObjectId
  design             Design            @relation(fields: [designId], references: [id], onDelete: Cascade)
  title              String
  elements           Json              // Required: Core content of the page as JSON array
  backgroundColor    String            @default("#ffffff")
  backgroundImage    String?
  frameHeight        Int?              @default(800)
  columnCount        Int?              @default(1)
  gridSize           Int?              @default(10)
  prototype          Json?             // Optional: Stores frame-level prototype data
  customComponentIds String[]          @db.ObjectId @default([]) // Optional: Specific custom components linked to this page
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Template {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  pages     Json     // Stores array of pages as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomComponent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  designId  String   @db.ObjectId
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  name      String   // Unique within a design, enforced in app logic if needed
  elements  Json     // Stores the array of elements as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}